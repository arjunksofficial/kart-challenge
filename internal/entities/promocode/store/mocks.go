// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// AddToSet provides a mock function for the type MockCache
func (_mock *MockCache) AddToSet(ctx context.Context, key string, code string) error {
	ret := _mock.Called(ctx, key, code)

	if len(ret) == 0 {
		panic("no return value specified for AddToSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, key, code)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_AddToSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToSet'
type MockCache_AddToSet_Call struct {
	*mock.Call
}

// AddToSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - code string
func (_e *MockCache_Expecter) AddToSet(ctx interface{}, key interface{}, code interface{}) *MockCache_AddToSet_Call {
	return &MockCache_AddToSet_Call{Call: _e.mock.On("AddToSet", ctx, key, code)}
}

func (_c *MockCache_AddToSet_Call) Run(run func(ctx context.Context, key string, code string)) *MockCache_AddToSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_AddToSet_Call) Return(err error) *MockCache_AddToSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_AddToSet_Call) RunAndReturn(run func(ctx context.Context, key string, code string) error) *MockCache_AddToSet_Call {
	_c.Call.Return(run)
	return _c
}

// IsPresentInSet provides a mock function for the type MockCache
func (_mock *MockCache) IsPresentInSet(ctx context.Context, key string, code string) (bool, error) {
	ret := _mock.Called(ctx, key, code)

	if len(ret) == 0 {
		panic("no return value specified for IsPresentInSet")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, key, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, key, code)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, key, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_IsPresentInSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPresentInSet'
type MockCache_IsPresentInSet_Call struct {
	*mock.Call
}

// IsPresentInSet is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - code string
func (_e *MockCache_Expecter) IsPresentInSet(ctx interface{}, key interface{}, code interface{}) *MockCache_IsPresentInSet_Call {
	return &MockCache_IsPresentInSet_Call{Call: _e.mock.On("IsPresentInSet", ctx, key, code)}
}

func (_c *MockCache_IsPresentInSet_Call) Run(run func(ctx context.Context, key string, code string)) *MockCache_IsPresentInSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_IsPresentInSet_Call) Return(b bool, err error) *MockCache_IsPresentInSet_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockCache_IsPresentInSet_Call) RunAndReturn(run func(ctx context.Context, key string, code string) (bool, error)) *MockCache_IsPresentInSet_Call {
	_c.Call.Return(run)
	return _c
}
