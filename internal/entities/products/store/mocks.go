// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"context"

	"github.com/arjunksofficial/kart-challenge/internal/entities/products/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function for the type MockStore
func (_mock *MockStore) GetByID(ctx context.Context, id string) (*models.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*models.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *models.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockStore_GetByID_Call {
	return &MockStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockStore_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_GetByID_Call) Return(product *models.Product, err error) *MockStore_GetByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockStore_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*models.Product, error)) *MockStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockStore
func (_mock *MockStore) ListProducts(ctx context.Context, filter models.ProductFilter) ([]models.Product, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []models.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.ProductFilter) ([]models.Product, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, models.ProductFilter) []models.Product); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, models.ProductFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockStore_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
//   - filter models.ProductFilter
func (_e *MockStore_Expecter) ListProducts(ctx interface{}, filter interface{}) *MockStore_ListProducts_Call {
	return &MockStore_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx, filter)}
}

func (_c *MockStore_ListProducts_Call) Run(run func(ctx context.Context, filter models.ProductFilter)) *MockStore_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 models.ProductFilter
		if args[1] != nil {
			arg1 = args[1].(models.ProductFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_ListProducts_Call) Return(products []models.Product, err error) *MockStore_ListProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockStore_ListProducts_Call) RunAndReturn(run func(ctx context.Context, filter models.ProductFilter) ([]models.Product, error)) *MockStore_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}
