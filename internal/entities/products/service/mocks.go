// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	"github.com/arjunksofficial/kart-challenge/internal/core/serror"
	"github.com/arjunksofficial/kart-challenge/internal/entities/products/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// GetProductByID provides a mock function for the type MockService
func (_mock *MockService) GetProductByID(ctx context.Context, id string) (models.ProductResponse, *serror.ServiceError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 models.ProductResponse
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (models.ProductResponse, *serror.ServiceError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) models.ProductResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(models.ProductResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *serror.ServiceError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockService_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockService_GetProductByID_Call {
	return &MockService_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockService_GetProductByID_Call) Run(run func(ctx context.Context, id string)) *MockService_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetProductByID_Call) Return(productResponse models.ProductResponse, serviceError *serror.ServiceError) *MockService_GetProductByID_Call {
	_c.Call.Return(productResponse, serviceError)
	return _c
}

func (_c *MockService_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id string) (models.ProductResponse, *serror.ServiceError)) *MockService_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListProducts provides a mock function for the type MockService
func (_mock *MockService) ListProducts(ctx context.Context) ([]models.ProductResponse, *serror.ServiceError) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []models.ProductResponse
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.ProductResponse, *serror.ServiceError)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.ProductResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) *serror.ServiceError); ok {
		r1 = returnFunc(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_ListProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProducts'
type MockService_ListProducts_Call struct {
	*mock.Call
}

// ListProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) ListProducts(ctx interface{}) *MockService_ListProducts_Call {
	return &MockService_ListProducts_Call{Call: _e.mock.On("ListProducts", ctx)}
}

func (_c *MockService_ListProducts_Call) Run(run func(ctx context.Context)) *MockService_ListProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_ListProducts_Call) Return(productResponses []models.ProductResponse, serviceError *serror.ServiceError) *MockService_ListProducts_Call {
	_c.Call.Return(productResponses, serviceError)
	return _c
}

func (_c *MockService_ListProducts_Call) RunAndReturn(run func(ctx context.Context) ([]models.ProductResponse, *serror.ServiceError)) *MockService_ListProducts_Call {
	_c.Call.Return(run)
	return _c
}
