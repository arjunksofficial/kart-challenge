// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"context"

	"github.com/arjunksofficial/kart-challenge/internal/entities/orders/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockStore
func (_mock *MockStore) CreateOrder(ctx context.Context, order *models.Order) error {
	ret := _mock.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.Order) error); ok {
		r0 = returnFunc(ctx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockStore_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order *models.Order
func (_e *MockStore_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockStore_CreateOrder_Call {
	return &MockStore_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockStore_CreateOrder_Call) Run(run func(ctx context.Context, order *models.Order)) *MockStore_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.Order
		if args[1] != nil {
			arg1 = args[1].(*models.Order)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_CreateOrder_Call) Return(err error) *MockStore_CreateOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, order *models.Order) error) *MockStore_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrderItems provides a mock function for the type MockStore
func (_mock *MockStore) CreateOrderItems(ctx context.Context, orderItems []models.OrderItem) error {
	ret := _mock.Called(ctx, orderItems)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrderItems")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []models.OrderItem) error); ok {
		r0 = returnFunc(ctx, orderItems)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_CreateOrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrderItems'
type MockStore_CreateOrderItems_Call struct {
	*mock.Call
}

// CreateOrderItems is a helper method to define mock.On call
//   - ctx context.Context
//   - orderItems []models.OrderItem
func (_e *MockStore_Expecter) CreateOrderItems(ctx interface{}, orderItems interface{}) *MockStore_CreateOrderItems_Call {
	return &MockStore_CreateOrderItems_Call{Call: _e.mock.On("CreateOrderItems", ctx, orderItems)}
}

func (_c *MockStore_CreateOrderItems_Call) Run(run func(ctx context.Context, orderItems []models.OrderItem)) *MockStore_CreateOrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []models.OrderItem
		if args[1] != nil {
			arg1 = args[1].([]models.OrderItem)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_CreateOrderItems_Call) Return(err error) *MockStore_CreateOrderItems_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_CreateOrderItems_Call) RunAndReturn(run func(ctx context.Context, orderItems []models.OrderItem) error) *MockStore_CreateOrderItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByID provides a mock function for the type MockStore
func (_mock *MockStore) GetOrderByID(ctx context.Context, id int) (*models.Order, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 *models.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.Order, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.Order); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByID'
type MockStore_GetOrderByID_Call struct {
	*mock.Call
}

// GetOrderByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockStore_Expecter) GetOrderByID(ctx interface{}, id interface{}) *MockStore_GetOrderByID_Call {
	return &MockStore_GetOrderByID_Call{Call: _e.mock.On("GetOrderByID", ctx, id)}
}

func (_c *MockStore_GetOrderByID_Call) Run(run func(ctx context.Context, id int)) *MockStore_GetOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_GetOrderByID_Call) Return(order *models.Order, err error) *MockStore_GetOrderByID_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockStore_GetOrderByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.Order, error)) *MockStore_GetOrderByID_Call {
	_c.Call.Return(run)
	return _c
}
